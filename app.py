import asyncio
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, \
    setup_application
from aiogram.fsm.storage.memory import MemoryStorage
from functools import partial
from variables import BOT_TOKEN, BASE_URL, WEBHOOK_PATH, ADMIN_ID, HOST, PORT
from handlers.user import user
from handlers.admin import admin
from handlers.webhooks import ckassa_webhook
from handlers.subscription_checker import subscription_checker
from database.models import async_main
# from tests.test_expired_date import simulate_expired_user, \
#     simulate_prev_expired_user
# from middlewares import AntiSpamMiddleware


bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
# dp.update.middleware(AntiSpamMiddleware(limit=2, interval=1))


# async def set_commands():
#     # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
#     commands = [BotCommand(command='start', description='–°—Ç–∞—Ä—Ç')]
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#     await bot.set_my_commands(commands, BotCommandScopeDefault())


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def on_startup() -> None:
    await async_main()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é
    # await set_commands()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π URL
    await bot.set_webhook(f"{BASE_URL}{WEBHOOK_PATH}")

    # await simulate_expired_user(tg_id=1000092717) #–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    asyncio.create_task(subscription_checker(bot))
    await bot.send_message(chat_id=ADMIN_ID, text='–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    webhook_info = await bot.get_webhook_info()
    print("üì° Webhook info:", webhook_info)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
async def on_shutdown() -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.send_message(chat_id=ADMIN_ID, text='–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞—è —Ä–µ—Å—É—Ä—Å—ã
    await bot.session.close()


def main() -> None:
    dp.include_routers(user, admin)
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    app = web.Application()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±—Ö—É–∫–æ–º
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot=bot  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø—É—Ç–∏
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    app.router.add_post(
        '/webhook/ckassa', partial(ckassa_webhook, bot=bot, storage=storage))
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º –∏ –±–æ—Ç–æ–º
    setup_application(app, dp, bot=bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ö–æ—Å—Ç–µ –∏ –ø–æ—Ä—Ç–µ
    web.run_app(app, host=HOST, port=PORT)


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO, format='''
        %(asctime)s - %(name)s - %(levelname)s - %(message)s''')
    logger = logging.getLogger(__name__)
    main()
